// Code generated by client-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/pmorie/federation-category-experiment/pkg/apis/federation/v1beta1"
	scheme "github.com/pmorie/federation-category-experiment/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// FederatedReplicaSetPlacementsGetter has a method to return a FederatedReplicaSetPlacementInterface.
// A group's client should implement this interface.
type FederatedReplicaSetPlacementsGetter interface {
	FederatedReplicaSetPlacements(namespace string) FederatedReplicaSetPlacementInterface
}

// FederatedReplicaSetPlacementInterface has methods to work with FederatedReplicaSetPlacement resources.
type FederatedReplicaSetPlacementInterface interface {
	Create(*v1beta1.FederatedReplicaSetPlacement) (*v1beta1.FederatedReplicaSetPlacement, error)
	Update(*v1beta1.FederatedReplicaSetPlacement) (*v1beta1.FederatedReplicaSetPlacement, error)
	UpdateStatus(*v1beta1.FederatedReplicaSetPlacement) (*v1beta1.FederatedReplicaSetPlacement, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1beta1.FederatedReplicaSetPlacement, error)
	List(opts v1.ListOptions) (*v1beta1.FederatedReplicaSetPlacementList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.FederatedReplicaSetPlacement, err error)
	FederatedReplicaSetPlacementExpansion
}

// federatedReplicaSetPlacements implements FederatedReplicaSetPlacementInterface
type federatedReplicaSetPlacements struct {
	client rest.Interface
	ns     string
}

// newFederatedReplicaSetPlacements returns a FederatedReplicaSetPlacements
func newFederatedReplicaSetPlacements(c *FederationV1beta1Client, namespace string) *federatedReplicaSetPlacements {
	return &federatedReplicaSetPlacements{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the federatedReplicaSetPlacement, and returns the corresponding federatedReplicaSetPlacement object, and an error if there is any.
func (c *federatedReplicaSetPlacements) Get(name string, options v1.GetOptions) (result *v1beta1.FederatedReplicaSetPlacement, err error) {
	result = &v1beta1.FederatedReplicaSetPlacement{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("federatedreplicasetplacements").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of FederatedReplicaSetPlacements that match those selectors.
func (c *federatedReplicaSetPlacements) List(opts v1.ListOptions) (result *v1beta1.FederatedReplicaSetPlacementList, err error) {
	result = &v1beta1.FederatedReplicaSetPlacementList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("federatedreplicasetplacements").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested federatedReplicaSetPlacements.
func (c *federatedReplicaSetPlacements) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("federatedreplicasetplacements").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a federatedReplicaSetPlacement and creates it.  Returns the server's representation of the federatedReplicaSetPlacement, and an error, if there is any.
func (c *federatedReplicaSetPlacements) Create(federatedReplicaSetPlacement *v1beta1.FederatedReplicaSetPlacement) (result *v1beta1.FederatedReplicaSetPlacement, err error) {
	result = &v1beta1.FederatedReplicaSetPlacement{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("federatedreplicasetplacements").
		Body(federatedReplicaSetPlacement).
		Do().
		Into(result)
	return
}

// Update takes the representation of a federatedReplicaSetPlacement and updates it. Returns the server's representation of the federatedReplicaSetPlacement, and an error, if there is any.
func (c *federatedReplicaSetPlacements) Update(federatedReplicaSetPlacement *v1beta1.FederatedReplicaSetPlacement) (result *v1beta1.FederatedReplicaSetPlacement, err error) {
	result = &v1beta1.FederatedReplicaSetPlacement{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("federatedreplicasetplacements").
		Name(federatedReplicaSetPlacement.Name).
		Body(federatedReplicaSetPlacement).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *federatedReplicaSetPlacements) UpdateStatus(federatedReplicaSetPlacement *v1beta1.FederatedReplicaSetPlacement) (result *v1beta1.FederatedReplicaSetPlacement, err error) {
	result = &v1beta1.FederatedReplicaSetPlacement{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("federatedreplicasetplacements").
		Name(federatedReplicaSetPlacement.Name).
		SubResource("status").
		Body(federatedReplicaSetPlacement).
		Do().
		Into(result)
	return
}

// Delete takes name of the federatedReplicaSetPlacement and deletes it. Returns an error if one occurs.
func (c *federatedReplicaSetPlacements) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("federatedreplicasetplacements").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *federatedReplicaSetPlacements) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("federatedreplicasetplacements").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched federatedReplicaSetPlacement.
func (c *federatedReplicaSetPlacements) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.FederatedReplicaSetPlacement, err error) {
	result = &v1beta1.FederatedReplicaSetPlacement{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("federatedreplicasetplacements").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
